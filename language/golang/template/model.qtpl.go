// Code generated by qtc from "model.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package template

import (
	"github.com/durudex/polygen"
	"github.com/durudex/polygen/language/golang/adapter"

	"github.com/iancoleman/strcase"
)

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func StreamModel(qw422016 *qt422016.Writer, models []*polygen.Model) {
	qw422016.N().S(`
`)
	for _, model := range models {
		qw422016.N().S(`type `)
		qw422016.E().S(strcase.ToCamel(model.Name))
		qw422016.N().S(` struct {
`)
		for _, field := range model.Fields {
			qw422016.N().S(`	`)
			qw422016.E().S(strcase.ToCamel(field.Name))
			qw422016.N().S(` `)
			switch {
			case field.Type.Array:
				qw422016.N().S(`[]`)
			case field.Type.Basic != 0:
				if field.Optional && !field.Type.Array {
					qw422016.N().S(`*`)
				}
				qw422016.E().S(adapter.TypeToString[field.Type.Basic])
			case field.Type.Map != nil:
				qw422016.N().S(`map[`)
				qw422016.E().S(adapter.TypeToString[field.Type.Map.Key])
				qw422016.N().S(`]`)
				qw422016.E().S(adapter.TypeToString[field.Type.Map.Value.Basic])
			case field.Type.Object != nil:
				if field.Optional {
					qw422016.N().S(`*`)
				}
				qw422016.E().S(strcase.ToCamel(field.Name))
			}
			qw422016.N().S(``)
			qw422016.N().S("`")
			qw422016.N().S(`json:"`)
			qw422016.E().S(field.Name)
			if field.Optional {
				qw422016.N().S(`,omitempty`)
			}
			qw422016.N().S(`"`)
			qw422016.N().S("`")
			qw422016.N().S(`
`)
		}
		qw422016.N().S(`}
`)
	}
}

func WriteModel(qq422016 qtio422016.Writer, models []*polygen.Model) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamModel(qw422016, models)
	qt422016.ReleaseWriter(qw422016)
}

func Model(models []*polygen.Model) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteModel(qb422016, models)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
